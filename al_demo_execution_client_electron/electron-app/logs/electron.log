2025-07-18T10:17:01.512Z info: Attempting to connect to Node server
2025-07-18T10:17:01.541Z info: Connected to Node server
2025-07-18T10:17:01.557Z info: Received message: {"type":"registration","clientId":"0c680afc-570e-454e-b41b-6be863c6268d"}
2025-07-18T10:17:01.557Z info: Registered with ID: 0c680afc-570e-454e-b41b-6be863c6268d
2025-07-18T10:17:57.167Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T10:17:57.168Z info: Running test case
2025-07-18T10:18:00.479Z info: Test report saved locally
2025-07-18T10:18:00.479Z info: Test report sent to Node server
2025-07-18T10:18:00.480Z info: Local test report deleted
2025-07-18T10:18:02.156Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T10:18:02.156Z info: Running test case
2025-07-18T10:18:04.228Z info: Test report saved locally
2025-07-18T10:18:04.228Z info: Test report sent to Node server
2025-07-18T10:18:04.229Z info: Local test report deleted
2025-07-18T10:22:31.259Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T10:22:31.259Z info: Running test case
2025-07-18T10:22:34.423Z info: Test report saved locally
2025-07-18T10:22:34.423Z info: Test report sent to Node server
2025-07-18T10:22:34.424Z info: Local test report deleted
2025-07-18T10:22:36.276Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T10:22:36.277Z info: Running test case
2025-07-18T10:22:38.235Z info: Test report saved locally
2025-07-18T10:22:38.236Z info: Test report sent to Node server
2025-07-18T10:22:38.236Z info: Local test report deleted
2025-07-18T10:26:03.894Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T10:26:03.895Z info: Running test case
2025-07-18T10:26:06.816Z info: Test report saved locally
2025-07-18T10:26:06.816Z info: Test report sent to Node server
2025-07-18T10:26:06.817Z info: Local test report deleted
2025-07-18T10:26:08.889Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T10:26:08.889Z info: Running test case
2025-07-18T10:26:10.836Z info: Test report saved locally
2025-07-18T10:26:10.836Z info: Test report sent to Node server
2025-07-18T10:26:10.837Z info: Local test report deleted
2025-07-18T10:28:46.647Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T10:28:46.648Z info: Running test case
2025-07-18T10:28:49.271Z info: Test report saved locally
2025-07-18T10:28:49.272Z info: Test report sent to Node server
2025-07-18T10:28:49.273Z info: Local test report deleted
2025-07-18T10:28:51.646Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T10:28:51.646Z info: Running test case
2025-07-18T10:28:53.681Z info: Test report saved locally
2025-07-18T10:28:53.682Z info: Test report sent to Node server
2025-07-18T10:28:53.683Z info: Local test report deleted
2025-07-18T10:31:33.448Z info: Disconnected from Node server
2025-07-18T10:31:38.449Z info: Attempting to connect to Node server
2025-07-18T10:31:38.457Z info: Connected to Node server
2025-07-18T10:31:38.471Z info: Received message: {"type":"registration","clientId":"53b1b8b5-4df3-40b0-b8e9-03061d22cf8f"}
2025-07-18T10:31:38.472Z info: Registered with ID: 53b1b8b5-4df3-40b0-b8e9-03061d22cf8f
2025-07-18T10:31:45.897Z info: Attempting to connect to Node server
2025-07-18T10:31:45.930Z info: Connected to Node server
2025-07-18T10:31:45.953Z info: Received message: {"type":"registration","clientId":"3503ae6a-fa8d-490a-b561-4bb9504460c4"}
2025-07-18T10:31:45.953Z info: Registered with ID: 3503ae6a-fa8d-490a-b561-4bb9504460c4
2025-07-18T10:33:01.833Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T10:33:01.834Z info: Running test case
2025-07-18T10:33:06.839Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T10:33:06.839Z info: Running test case
2025-07-18T10:33:10.329Z info: Test report saved locally
2025-07-18T10:33:10.330Z info: Test report sent to Node server
2025-07-18T10:33:10.331Z info: Local test report deleted
2025-07-18T10:33:20.553Z info: Test report saved locally
2025-07-18T10:33:20.554Z info: Test report sent to Node server
2025-07-18T10:33:20.554Z info: Local test report deleted
2025-07-18T10:35:26.239Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T10:35:26.240Z info: Running test case
2025-07-18T10:35:31.236Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T10:35:31.237Z info: Running test case
2025-07-18T10:35:34.649Z info: Test report saved locally
2025-07-18T10:35:34.649Z info: Test report sent to Node server
2025-07-18T10:35:34.651Z info: Local test report deleted
2025-07-18T10:35:44.643Z info: Test report saved locally
2025-07-18T10:35:44.644Z info: Test report sent to Node server
2025-07-18T10:35:44.646Z info: Local test report deleted
2025-07-18T10:38:10.176Z info: Disconnected from Node server
2025-07-18T10:38:15.186Z info: Attempting to connect to Node server
2025-07-18T10:38:15.204Z info: Connected to Node server
2025-07-18T10:38:15.228Z info: Received message: {"type":"registration","clientId":"b5f79e20-67b5-42a6-a163-3fe3eaf1f9e2"}
2025-07-18T10:38:15.229Z info: Registered with ID: b5f79e20-67b5-42a6-a163-3fe3eaf1f9e2
2025-07-18T10:39:15.300Z info: Attempting to connect to Node server
2025-07-18T10:39:15.333Z info: Connected to Node server
2025-07-18T10:39:15.353Z info: Received message: {"type":"registration","clientId":"b8c4177f-4cbe-492a-b3f9-e67ec42edb5d"}
2025-07-18T10:39:15.353Z info: Registered with ID: b8c4177f-4cbe-492a-b3f9-e67ec42edb5d
2025-07-18T10:40:52.965Z info: Disconnected from Node server
2025-07-18T10:41:29.057Z info: Attempting to connect to Node server
2025-07-18T10:41:29.090Z info: Connected to Node server
2025-07-18T10:41:29.108Z info: Received message: {"type":"registration","clientId":"c293f327-0494-44f6-8bea-64c6aeb3d0d4"}
2025-07-18T10:41:29.108Z info: Registered with ID: c293f327-0494-44f6-8bea-64c6aeb3d0d4
2025-07-18T10:42:08.275Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T10:42:08.276Z info: Running test case
2025-07-18T10:42:13.279Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T10:42:13.280Z info: Running test case
2025-07-18T10:42:16.725Z info: Test report saved locally
2025-07-18T10:42:16.725Z info: Test report sent to Node server
2025-07-18T10:42:16.726Z info: Local test report deleted
2025-07-18T10:42:17.111Z info: Test report saved locally
2025-07-18T10:42:17.112Z info: Test report sent to Node server
2025-07-18T10:42:17.112Z info: Local test report deleted
2025-07-18T11:56:17.907Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"chrome"}}
2025-07-18T11:56:17.908Z info: Running test case
2025-07-18T11:56:22.911Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"chrome"}}
2025-07-18T11:56:22.911Z info: Running test case
2025-07-18T11:56:26.596Z info: Test report saved locally
2025-07-18T11:56:26.597Z info: Test report sent to Node server
2025-07-18T11:56:26.598Z info: Local test report deleted
2025-07-18T11:56:27.752Z info: Test report saved locally
2025-07-18T11:56:27.752Z info: Test report sent to Node server
2025-07-18T11:56:27.753Z info: Local test report deleted
2025-07-18T11:56:59.479Z info: Attempting to connect to Node server
2025-07-18T11:56:59.513Z info: Connected to Node server
2025-07-18T11:56:59.528Z info: Received message: {"type":"registration","clientId":"c00c4414-9c9e-4015-b197-5c9b141e3099"}
2025-07-18T11:56:59.529Z info: Registered with ID: c00c4414-9c9e-4015-b197-5c9b141e3099
2025-07-18T12:54:29.756Z info: Disconnected from Node server
2025-07-21T06:33:41.883Z info: Attempting to connect to Node server
2025-07-21T06:33:41.984Z info: Connected to Node server
2025-07-21T06:33:42.029Z info: Received message: {"type":"registration","clientId":"193d2329-4f82-4ae3-a050-6a489629dd62"}
2025-07-21T06:33:42.033Z info: Registered with ID: 193d2329-4f82-4ae3-a050-6a489629dd62
2025-07-21T06:48:28.306Z info: Attempting to connect to Node server
2025-07-21T06:48:28.362Z info: Connected to Node server
2025-07-21T06:48:28.394Z info: Received message: {"type":"registration","clientId":"90b8e195-744a-4497-88d6-9eb6b19454c5"}
2025-07-21T06:48:28.400Z info: Registered with ID: 90b8e195-744a-4497-88d6-9eb6b19454c5
2025-07-21T06:58:18.893Z info: Disconnected from Node server
2025-07-21T06:58:23.898Z info: Attempting to connect to Node server
2025-07-21T06:58:23.904Z error: WebSocket error: 
2025-07-21T06:58:23.905Z info: Disconnected from Node server
2025-07-21T06:58:28.907Z info: Attempting to connect to Node server
2025-07-21T06:58:28.918Z info: Connected to Node server
2025-07-21T06:58:28.937Z info: Received message: {"type":"registration","clientId":"1043f212-04f7-406e-b2fb-ed1909226a6f"}
2025-07-21T06:58:28.937Z info: Registered with ID: 1043f212-04f7-406e-b2fb-ed1909226a6f
2025-07-21T10:17:07.853Z info: Attempting to connect to Node server
2025-07-21T10:17:09.102Z info: Connected to Node server
2025-07-21T10:17:09.139Z info: Received message: {"type":"registration","clientId":"f7f41170-8919-442b-a73b-80dc4d0f0468"}
2025-07-21T10:17:09.139Z info: Registered with ID: f7f41170-8919-442b-a73b-80dc4d0f0468
2025-07-21T11:24:29.068Z info: Disconnected from Node server
2025-07-21T11:24:34.080Z info: Attempting to connect to Node server
2025-07-21T11:24:34.086Z error: WebSocket error: 
2025-07-21T11:24:34.086Z info: Disconnected from Node server
2025-07-21T11:24:39.088Z info: Attempting to connect to Node server
2025-07-21T11:24:39.091Z error: WebSocket error: 
2025-07-21T11:24:39.092Z info: Disconnected from Node server
2025-07-21T11:24:44.104Z info: Attempting to connect to Node server
2025-07-21T11:24:44.113Z info: Connected to Node server
2025-07-21T11:24:44.134Z info: Received message: {"type":"registration","clientId":"972165c4-65a7-43b5-86e6-688ba436705d"}
2025-07-21T11:24:44.134Z info: Registered with ID: 972165c4-65a7-43b5-86e6-688ba436705d
2025-07-21T11:24:53.275Z info: Attempting to connect to Node server
2025-07-21T11:24:53.319Z info: Connected to Node server
2025-07-21T11:24:53.340Z info: Received message: {"type":"registration","clientId":"704dc239-3e42-4087-a712-36f4ef232fd1"}
2025-07-21T11:24:53.340Z info: Registered with ID: 704dc239-3e42-4087-a712-36f4ef232fd1
2025-07-21T11:25:32.585Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"Chrome"}}
2025-07-21T11:25:32.586Z info: Running test case
2025-07-21T11:25:32.594Z info: Test report saved locally
2025-07-21T11:25:32.595Z info: Test report sent to Node server
2025-07-21T11:25:32.597Z info: Local test report deleted
2025-07-21T11:25:37.598Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"Chrome"}}
2025-07-21T11:25:37.598Z info: Running test case
2025-07-21T11:25:37.601Z info: Test report saved locally
2025-07-21T11:25:37.601Z info: Test report sent to Node server
2025-07-21T11:25:37.602Z info: Local test report deleted
2025-07-21T11:30:56.081Z info: Received message: {"type":"run-test","testCase":{"name":"test_google_search","browser":"Chrome"}}
2025-07-21T11:30:56.083Z info: Running test case
2025-07-21T11:30:56.089Z info: Test report saved locally
2025-07-21T11:30:56.090Z info: Test report sent to Node server
2025-07-21T11:30:56.091Z info: Local test report deleted
2025-07-21T11:31:01.087Z info: Received message: {"type":"run-test","testCase":{"name":"test_wikipedia","browser":"Chrome"}}
2025-07-21T11:31:01.088Z info: Running test case
2025-07-21T11:31:01.091Z info: Test report saved locally
2025-07-21T11:31:01.093Z info: Test report sent to Node server
2025-07-21T11:31:01.096Z info: Local test report deleted
2025-07-21T11:42:20.034Z info: Attempting to connect to Node server
2025-07-21T11:42:20.065Z info: Connected to Node server
2025-07-21T11:42:20.083Z info: Received message: {"type":"registration","clientId":"d8df9d07-07dc-42ca-ab92-c20cb8e79b18"}
2025-07-21T11:42:20.084Z info: Registered with ID: d8df9d07-07dc-42ca-ab92-c20cb8e79b18
2025-07-21T12:00:27.398Z info: Disconnected from Node server
2025-07-21T12:06:18.141Z info: Attempting to connect to Node server
2025-07-21T12:06:18.213Z info: Connected to Node server
2025-07-21T12:06:18.247Z info: Received message: {"type":"registration","clientId":"e6158072-94b6-48f1-8ded-f0aa36f4d289"}
2025-07-21T12:06:18.248Z info: Registered with ID: e6158072-94b6-48f1-8ded-f0aa36f4d289
2025-07-21T12:24:56.555Z info: Disconnected from Node server
2025-07-21T12:25:26.317Z info: Attempting to connect to Node server
2025-07-21T12:25:26.360Z info: Connected to Node server
2025-07-21T12:25:26.378Z info: Received message: {"type":"registration","clientId":"6429d6af-f277-4d17-986d-15225be01519"}
2025-07-21T12:25:26.379Z info: Registered with ID: 6429d6af-f277-4d17-986d-15225be01519
2025-07-21T13:01:46.489Z info: Disconnected from Node server
2025-07-21T13:02:35.009Z info: Attempting to connect to Node server
2025-07-21T13:02:35.057Z info: Connected to Node server
2025-07-21T13:02:35.091Z info: Received message: {"type":"registration","clientId":"a581c3dc-0104-4386-aff9-3791b6d30b7f"}
2025-07-21T13:02:35.091Z info: Registered with ID: a581c3dc-0104-4386-aff9-3791b6d30b7f
2025-07-21T13:03:47.405Z info: Received message: {"type":"run-test","testCase":{"name":"test_1_Login_with_valid_credential_1.py","browser":"Chrome"}}
2025-07-21T13:03:47.406Z info: Running test case
2025-07-21T13:03:47.414Z info: Test report saved locally
2025-07-21T13:03:47.415Z info: Test report sent to Node server
2025-07-21T13:03:47.419Z info: Local test report deleted
2025-07-21T13:03:47.422Z info: Received message: {"type":"run-test","testCase":{"name":"test_2_Login_with_invalid_credentials_2.py","browser":"Chrome"}}
2025-07-21T13:03:47.423Z info: Running test case
2025-07-21T13:03:47.428Z info: Test report saved locally
2025-07-21T13:03:47.431Z info: Test report sent to Node server
2025-07-21T13:03:47.436Z info: Local test report deleted
2025-07-21T13:07:02.857Z info: Attempting to connect to Node server
2025-07-21T13:07:02.890Z info: Connected to Node server
2025-07-21T13:07:02.910Z info: Received message: {"type":"registration","clientId":"298b80cc-2bbf-4979-9c6f-9a1203dbf62a"}
2025-07-21T13:07:02.910Z info: Registered with ID: 298b80cc-2bbf-4979-9c6f-9a1203dbf62a
2025-07-21T13:07:48.710Z info: Received message: {"type":"run-test","testCase":{"name":"test_1_Login_with_valid_credential_1.py","browser":"Chrome"}}
2025-07-21T13:07:48.714Z info: Running test case
2025-07-21T13:07:50.234Z info: Received message: {"type":"run-test","testCase":{"name":"test_2_Login_with_invalid_credentials_2.py","browser":"Chrome"}}
2025-07-21T13:07:50.235Z info: Running test case
2025-07-21T13:07:51.984Z info: Test report saved locally
2025-07-21T13:07:51.985Z info: Test report sent to Node server
2025-07-21T13:07:51.986Z info: Local test report deleted
2025-07-21T13:07:55.828Z info: Test report saved locally
2025-07-21T13:07:55.829Z info: Test report sent to Node server
2025-07-21T13:07:55.830Z info: Local test report deleted
2025-07-21T13:10:05.291Z info: Disconnected from Node server
2025-07-21T13:10:10.302Z info: Attempting to connect to Node server
2025-07-21T13:10:10.306Z error: WebSocket error: 
2025-07-21T13:10:10.307Z info: Disconnected from Node server
2025-07-21T13:19:04.986Z info: Attempting to connect to Node server
2025-07-21T13:19:05.019Z info: Connected to Node server
2025-07-21T13:19:05.045Z info: Received message: {"type":"registration","clientId":"f137c9b6-c9ac-4f71-8823-b8edbce96333"}
2025-07-21T13:19:05.045Z info: Registered with ID: f137c9b6-c9ac-4f71-8823-b8edbce96333
2025-07-21T13:19:16.876Z info: Attempting to connect to Node server
2025-07-21T13:19:16.917Z info: Connected to Node server
2025-07-21T13:19:16.948Z info: Received message: {"type":"registration","clientId":"ccfd684f-fed1-46d5-8be5-3983e4273603"}
2025-07-21T13:19:16.950Z info: Registered with ID: ccfd684f-fed1-46d5-8be5-3983e4273603
2025-07-21T13:20:08.394Z info: Received message: {"type":"run-test","testCase":{"name":"test_1_Login_with_valid_credential_1.py","browser":"Chrome"}}
2025-07-21T13:20:08.407Z info: Running test case
2025-07-21T13:20:08.446Z info: Received message: {"type":"run-test","testCase":{"name":"test_2_Login_with_invalid_credentials_2.py","browser":"Chrome"}}
2025-07-21T13:20:08.446Z info: Running test case
2025-07-21T13:21:28.328Z info: Disconnected from Node server
2025-07-22T06:00:08.657Z info: Logs directory created or already exists
2025-07-22T06:00:08.778Z info: Attempting to connect to Node server
2025-07-22T06:00:08.804Z info: Connected to Node server
2025-07-22T06:00:08.871Z info: Received message: {"type":"registration","clientId":"a794477b-1883-4442-87cc-ee968b0adccc"}
2025-07-22T06:00:08.873Z info: Registered with ID: a794477b-1883-4442-87cc-ee968b0adccc
2025-07-22T06:00:45.852Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\nimport unittest\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Chrome()  # Ensure chromedriver is in PATH\n        self.driver.get(\"http://logistics.pearlarc.com/\")  # Replace with your login URL\n        self.driver.maximize_window()\n\n    def test_valid_login(self):\n        driver = self.driver\n        driver.find_element(By.NAME, \"UserName\").send_keys(\"Monica\")\n        driver.find_element(By.NAME, \"Password\").send_keys(\"Monica@123\")\n        driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\").click()\n        time.sleep(2)  # Wait for redirect\n        # self.assertIn(\"dashboard\", driver.current_url)\n\n    # def test_invalid_login(self):\n    #     driver = self.driver\n    #     driver.find_element(By.ID, \"username\").send_keys(\"wronguser\")\n    #     driver.find_element(By.ID, \"password\").send_keys(\"wrongpass\")\n    #     driver.find_element(By.ID, \"loginBtn\").click()\n    #     time.sleep(2)\n    #     error_msg = driver.find_element(By.ID, \"errorMsg\").text\n    #     self.assertIn(\"Invalid credentials\", error_msg)\n\n    def tearDown(self):\n        self.driver.quit()\n"}}
2025-07-22T06:00:45.854Z info: Running test case: test_login.py
2025-07-22T06:00:45.857Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:00:46.570Z info: Test report saved locally
2025-07-22T06:00:46.573Z info: Test report sent to Node server
2025-07-22T06:00:46.575Z info: Temporary files deleted
2025-07-22T06:01:54.348Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\nimport unittest\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        self.driver = webdriver.Chrome()  # Ensure chromedriver is in PATH\n        self.driver.get(\"http://logistics.pearlarc.com/\")  # Replace with your login URL\n        self.driver.maximize_window()\n\n    def test_valid_login(self):\n        driver = self.driver\n        driver.find_element(By.NAME, \"UserName\").send_keys(\"Monica\")\n        driver.find_element(By.NAME, \"Password\").send_keys(\"Monica@123\")\n        driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\").click()\n        time.sleep(2)  # Wait for redirect\n        # self.assertIn(\"dashboard\", driver.current_url)\n\n    # def test_invalid_login(self):\n    #     driver = self.driver\n    #     driver.find_element(By.ID, \"username\").send_keys(\"wronguser\")\n    #     driver.find_element(By.ID, \"password\").send_keys(\"wrongpass\")\n    #     driver.find_element(By.ID, \"loginBtn\").click()\n    #     time.sleep(2)\n    #     error_msg = driver.find_element(By.ID, \"errorMsg\").text\n    #     self.assertIn(\"Invalid credentials\", error_msg)\n\n    def tearDown(self):\n        self.driver.quit()\n"}}
2025-07-22T06:01:54.363Z info: Running test case: test_login.py
2025-07-22T06:01:54.367Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:01:54.952Z info: Test report saved locally
2025-07-22T06:01:54.952Z info: Test report sent to Node server
2025-07-22T06:01:54.956Z info: Temporary files deleted
2025-07-22T06:08:11.398Z info: Disconnected from Node server
2025-07-22T06:08:16.411Z info: Attempting to connect to Node server
2025-07-22T06:08:16.415Z error: WebSocket error: 
2025-07-22T06:08:16.415Z info: Disconnected from Node server
2025-07-22T06:15:51.711Z info: Logs directory created or already exists
2025-07-22T06:15:51.853Z info: Attempting to connect to Node server
2025-07-22T06:15:51.904Z info: Connected to Node server
2025-07-22T06:15:51.930Z info: Received message: {"type":"registration","clientId":"8321b481-1120-41d6-ab04-a33052eb25ab"}
2025-07-22T06:15:51.937Z info: Registered with ID: 8321b481-1120-41d6-ab04-a33052eb25ab
2025-07-22T06:16:32.846Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport time\nimport unittest\nimport os\nimport sys\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        try:\n            # Setup Chrome options\n            options = Options()\n            options.add_argument('--start-maximized')  # Start maximized\n            # Comment out headless mode for debugging\n            options.add_argument('--headless')  # Run in headless mode\n            options.add_argument('--disable-gpu')  # Disable GPU hardware acceleration\n            options.add_argument('--no-sandbox')  # Bypass OS security model\n            options.add_argument('--disable-dev-shm-usage')  # Overcome limited resource problems\n            \n            # Initialize the Chrome driver with ChromeDriverManager\n            print(\"Setting up Chrome driver...\")\n            self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n            print(f\"Chrome driver initialized: {self.driver}\")\n            \n            # Navigate to the login page\n            print(\"Navigating to login page...\")\n            self.driver.get(\"http://logistics.pearlarc.com/\")\n            print(f\"Current URL: {self.driver.current_url}\")\n        except Exception as e:\n            print(f\"Error in setUp: {str(e)}\")\n            raise\n\n    def test_valid_login(self):\n        try:\n            driver = self.driver\n            print(\"Starting login test\")\n            print(f\"Current URL before login: {driver.current_url}\")\n            \n            # Save current directory\n            current_dir = os.getcwd()\n            print(f\"Current directory: {current_dir}\")\n            \n            # Take screenshot before login\n            screenshot_path = os.path.join(current_dir, 'before_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot before login at: {screenshot_path}\")\n            \n            # Find and enter username\n            print(\"Finding username field...\")\n            username_field = driver.find_element(By.NAME, \"UserName\")\n            username_field.send_keys(\"Monica\")\n            print(\"Entered username: Monica\")\n            \n            # Find and enter password\n            print(\"Finding password field...\")\n            password_field = driver.find_element(By.NAME, \"Password\")\n            password_field.send_keys(\"Monica@123\")\n            print(\"Entered password: Monica@123\")\n            \n            # Find and click login button\n            print(\"Finding login button...\")\n            login_button = driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\")\n            login_button.click()\n            print(\"Clicked login button\")\n            \n            # Wait for redirect\n            print(\"Waiting for redirect...\")\n            time.sleep(5)  # Increased wait time\n            \n            # Take screenshot after login\n            screenshot_path = os.path.join(current_dir, 'after_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot after login at: {screenshot_path}\")\n            \n            print(f\"Current URL after login: {driver.current_url}\")\n            print(f\"Page title: {driver.title}\")\n            \n        except Exception as e:\n            print(f\"Error during test: {str(e)}\")\n            # Take screenshot on error\n            try:\n                screenshot_path = os.path.join(os.getcwd(), 'error.png')\n                driver.save_screenshot(screenshot_path)\n                print(f\"Saved error screenshot at: {screenshot_path}\")\n            except Exception as screenshot_error:\n                print(f\"Could not save error screenshot: {str(screenshot_error)}\")\n            raise\n\n    def tearDown(self):\n        if hasattr(self, 'driver'):\n            print(\"Closing browser...\")\n            self.driver.quit()\n            print(\"Browser closed\")\n\nif __name__ == '__main__':\n    print(f\"Python version: {sys.version}\")\n    print(f\"Starting test execution from: {os.getcwd()}\")\n    unittest.main()"}}
2025-07-22T06:16:32.853Z info: Running test case: test_login.py
2025-07-22T06:16:32.858Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:17:04.283Z info: Test report saved locally
2025-07-22T06:17:04.292Z info: Test report sent to Node server
2025-07-22T06:17:04.295Z info: Temporary files deleted
2025-07-22T06:17:25.930Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport time\nimport unittest\nimport os\nimport sys\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        try:\n            # Setup Chrome options\n            options = Options()\n            options.add_argument('--start-maximized')  # Start maximized\n            # Comment out headless mode for debugging\n            options.add_argument('--headless')  # Run in headless mode\n            options.add_argument('--disable-gpu')  # Disable GPU hardware acceleration\n            options.add_argument('--no-sandbox')  # Bypass OS security model\n            options.add_argument('--disable-dev-shm-usage')  # Overcome limited resource problems\n            \n            # Initialize the Chrome driver with ChromeDriverManager\n            print(\"Setting up Chrome driver...\")\n            self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n            print(f\"Chrome driver initialized: {self.driver}\")\n            \n            # Navigate to the login page\n            print(\"Navigating to login page...\")\n            self.driver.get(\"http://logistics.pearlarc.com/\")\n            print(f\"Current URL: {self.driver.current_url}\")\n        except Exception as e:\n            print(f\"Error in setUp: {str(e)}\")\n            raise\n\n    def test_valid_login(self):\n        try:\n            driver = self.driver\n            print(\"Starting login test\")\n            print(f\"Current URL before login: {driver.current_url}\")\n            \n            # Save current directory\n            current_dir = os.getcwd()\n            print(f\"Current directory: {current_dir}\")\n            \n            # Take screenshot before login\n            screenshot_path = os.path.join(current_dir, 'before_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot before login at: {screenshot_path}\")\n            \n            # Find and enter username\n            print(\"Finding username field...\")\n            username_field = driver.find_element(By.NAME, \"UserName\")\n            username_field.send_keys(\"Monica\")\n            print(\"Entered username: Monica\")\n            \n            # Find and enter password\n            print(\"Finding password field...\")\n            password_field = driver.find_element(By.NAME, \"Password\")\n            password_field.send_keys(\"Monica@123\")\n            print(\"Entered password: Monica@123\")\n            \n            # Find and click login button\n            print(\"Finding login button...\")\n            login_button = driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\")\n            login_button.click()\n            print(\"Clicked login button\")\n            \n            # Wait for redirect\n            print(\"Waiting for redirect...\")\n            time.sleep(5)  # Increased wait time\n            \n            # Take screenshot after login\n            screenshot_path = os.path.join(current_dir, 'after_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot after login at: {screenshot_path}\")\n            \n            print(f\"Current URL after login: {driver.current_url}\")\n            print(f\"Page title: {driver.title}\")\n            \n        except Exception as e:\n            print(f\"Error during test: {str(e)}\")\n            # Take screenshot on error\n            try:\n                screenshot_path = os.path.join(os.getcwd(), 'error.png')\n                driver.save_screenshot(screenshot_path)\n                print(f\"Saved error screenshot at: {screenshot_path}\")\n            except Exception as screenshot_error:\n                print(f\"Could not save error screenshot: {str(screenshot_error)}\")\n            raise\n\n    def tearDown(self):\n        if hasattr(self, 'driver'):\n            print(\"Closing browser...\")\n            self.driver.quit()\n            print(\"Browser closed\")\n\nif __name__ == '__main__':\n    print(f\"Python version: {sys.version}\")\n    print(f\"Starting test execution from: {os.getcwd()}\")\n    unittest.main()"}}
2025-07-22T06:17:25.946Z info: Running test case: test_login.py
2025-07-22T06:17:25.953Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:17:56.527Z info: Test report saved locally
2025-07-22T06:17:56.531Z info: Test report sent to Node server
2025-07-22T06:17:56.533Z info: Temporary files deleted
2025-07-22T06:19:04.013Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport time\nimport unittest\nimport os\nimport sys\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        try:\n            # Setup Chrome options\n            options = Options()\n            options.add_argument('--start-maximized')  # Start maximized\n            # Run in visible mode for debugging\n            # options.add_argument('--headless')  # Run in headless mode\n            options.add_argument('--disable-gpu')  # Disable GPU hardware acceleration\n            options.add_argument('--no-sandbox')  # Bypass OS security model\n            options.add_argument('--disable-dev-shm-usage')  # Overcome limited resource problems\n            \n            # Initialize the Chrome driver with ChromeDriverManager\n            print(\"Setting up Chrome driver...\")\n            self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n            print(f\"Chrome driver initialized: {self.driver}\")\n            \n            # Navigate to the login page\n            print(\"Navigating to login page...\")\n            self.driver.get(\"http://logistics.pearlarc.com/\")\n            print(f\"Current URL: {self.driver.current_url}\")\n        except Exception as e:\n            print(f\"Error in setUp: {str(e)}\")\n            raise\n\n    def test_valid_login(self):\n        try:\n            driver = self.driver\n            print(\"Starting login test\")\n            print(f\"Current URL before login: {driver.current_url}\")\n            \n            # Save current directory\n            current_dir = os.getcwd()\n            print(f\"Current directory: {current_dir}\")\n            \n            # Take screenshot before login\n            screenshot_path = os.path.join(current_dir, 'before_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot before login at: {screenshot_path}\")\n            \n            # Find and enter username\n            print(\"Finding username field...\")\n            username_field = driver.find_element(By.NAME, \"UserName\")\n            username_field.send_keys(\"Monica\")\n            print(\"Entered username: Monica\")\n            \n            # Find and enter password\n            print(\"Finding password field...\")\n            password_field = driver.find_element(By.NAME, \"Password\")\n            password_field.send_keys(\"Monica@123\")\n            print(\"Entered password: Monica@123\")\n            \n            # Find and click login button\n            print(\"Finding login button...\")\n            login_button = driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\")\n            login_button.click()\n            print(\"Clicked login button\")\n            \n            # Wait for redirect\n            print(\"Waiting for redirect...\")\n            time.sleep(5)  # Increased wait time\n            \n            # Take screenshot after login\n            screenshot_path = os.path.join(current_dir, 'after_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot after login at: {screenshot_path}\")\n            \n            print(f\"Current URL after login: {driver.current_url}\")\n            print(f\"Page title: {driver.title}\")\n            \n        except Exception as e:\n            print(f\"Error during test: {str(e)}\")\n            # Take screenshot on error\n            try:\n                screenshot_path = os.path.join(os.getcwd(), 'error.png')\n                driver.save_screenshot(screenshot_path)\n                print(f\"Saved error screenshot at: {screenshot_path}\")\n            except Exception as screenshot_error:\n                print(f\"Could not save error screenshot: {str(screenshot_error)}\")\n            raise\n\n    def tearDown(self):\n        if hasattr(self, 'driver'):\n            print(\"Closing browser...\")\n            self.driver.quit()\n            print(\"Browser closed\")\n\nif __name__ == '__main__':\n    print(f\"Python version: {sys.version}\")\n    print(f\"Starting test execution from: {os.getcwd()}\")\n    unittest.main()"}}
2025-07-22T06:19:04.014Z info: Running test case: test_login.py
2025-07-22T06:19:04.017Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:19:32.065Z info: Test report saved locally
2025-07-22T06:19:32.086Z info: Test report sent to Node server
2025-07-22T06:19:32.089Z info: Temporary files deleted
2025-07-22T06:20:32.164Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport time\nimport unittest\nimport os\nimport sys\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        try:\n            # Setup Chrome options\n            options = Options()\n            options.add_argument('--start-maximized')  # Start maximized\n            # Run in visible mode for debugging\n            # options.add_argument('--headless')  # Run in headless mode\n            options.add_argument('--disable-gpu')  # Disable GPU hardware acceleration\n            options.add_argument('--no-sandbox')  # Bypass OS security model\n            options.add_argument('--disable-dev-shm-usage')  # Overcome limited resource problems\n            \n            # Initialize the Chrome driver with ChromeDriverManager\n            print(\"Setting up Chrome driver...\")\n            self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n            print(f\"Chrome driver initialized: {self.driver}\")\n            \n            # Navigate to the login page\n            print(\"Navigating to login page...\")\n            self.driver.get(\"http://logistics.pearlarc.com/\")\n            print(f\"Current URL: {self.driver.current_url}\")\n        except Exception as e:\n            print(f\"Error in setUp: {str(e)}\")\n            raise\n\n    def test_valid_login(self):\n        try:\n            driver = self.driver\n            print(\"Starting login test\")\n            print(f\"Current URL before login: {driver.current_url}\")\n            \n            # Save current directory\n            current_dir = os.getcwd()\n            print(f\"Current directory: {current_dir}\")\n            \n            # Take screenshot before login\n            screenshot_path = os.path.join(current_dir, 'before_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot before login at: {screenshot_path}\")\n            \n            # Find and enter username\n            print(\"Finding username field...\")\n            username_field = driver.find_element(By.NAME, \"UserName\")\n            username_field.send_keys(\"Monica\")\n            print(\"Entered username: Monica\")\n            \n            # Find and enter password\n            print(\"Finding password field...\")\n            password_field = driver.find_element(By.NAME, \"Password\")\n            password_field.send_keys(\"Monica@123\")\n            print(\"Entered password: Monica@123\")\n            \n            # Find and click login button\n            print(\"Finding login button...\")\n            login_button = driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\")\n            login_button.click()\n            print(\"Clicked login button\")\n            \n            # Wait for redirect\n            print(\"Waiting for redirect...\")\n            time.sleep(5)  # Increased wait time\n            \n            # Take screenshot after login\n            screenshot_path = os.path.join(current_dir, 'after_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot after login at: {screenshot_path}\")\n            \n            print(f\"Current URL after login: {driver.current_url}\")\n            print(f\"Page title: {driver.title}\")\n            \n        except Exception as e:\n            print(f\"Error during test: {str(e)}\")\n            # Take screenshot on error\n            try:\n                screenshot_path = os.path.join(os.getcwd(), 'error.png')\n                driver.save_screenshot(screenshot_path)\n                print(f\"Saved error screenshot at: {screenshot_path}\")\n            except Exception as screenshot_error:\n                print(f\"Could not save error screenshot: {str(screenshot_error)}\")\n            raise\n\n    def tearDown(self):\n        if hasattr(self, 'driver'):\n            print(\"Closing browser...\")\n            self.driver.quit()\n            print(\"Browser closed\")\n\nif __name__ == '__main__':\n    print(f\"Python version: {sys.version}\")\n    print(f\"Starting test execution from: {os.getcwd()}\")\n    unittest.main()"}}
2025-07-22T06:20:32.165Z info: Running test case: test_login.py
2025-07-22T06:20:32.167Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:20:54.364Z info: Test report saved locally
2025-07-22T06:20:54.381Z info: Test report sent to Node server
2025-07-22T06:20:54.386Z info: Temporary files deleted
2025-07-22T06:22:54.384Z info: Disconnected from Node server
2025-07-22T06:23:19.758Z info: Logs directory created or already exists
2025-07-22T06:23:19.885Z info: Attempting to connect to Node server
2025-07-22T06:23:19.918Z info: Connected to Node server
2025-07-22T06:23:19.939Z info: Received message: {"type":"registration","clientId":"e5804145-5a82-4561-a49b-afddbd6ebe4e"}
2025-07-22T06:23:19.940Z info: Registered with ID: e5804145-5a82-4561-a49b-afddbd6ebe4e
2025-07-22T06:24:38.488Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport time\nimport unittest\nimport os\nimport sys\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        try:\n            # Setup Chrome options\n            options = Options()\n            options.add_argument('--start-maximized')  # Start maximized\n            # Run in visible mode for debugging\n            # options.add_argument('--headless')  # Run in headless mode\n            options.add_argument('--disable-gpu')  # Disable GPU hardware acceleration\n            options.add_argument('--no-sandbox')  # Bypass OS security model\n            options.add_argument('--disable-dev-shm-usage')  # Overcome limited resource problems\n            \n            # Initialize the Chrome driver with ChromeDriverManager\n            print(\"Setting up Chrome driver...\")\n            self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n            print(f\"Chrome driver initialized: {self.driver}\")\n            \n            # Navigate to the login page\n            print(\"Navigating to login page...\")\n            self.driver.get(\"http://logistics.pearlarc.com/\")\n            print(f\"Current URL: {self.driver.current_url}\")\n        except Exception as e:\n            print(f\"Error in setUp: {str(e)}\")\n            raise\n\n    def test_valid_login(self):\n        try:\n            driver = self.driver\n            print(\"Starting login test\")\n            print(f\"Current URL before login: {driver.current_url}\")\n            \n            # Save current directory\n            current_dir = os.getcwd()\n            print(f\"Current directory: {current_dir}\")\n            \n            # Take screenshot before login\n            screenshot_path = os.path.join(current_dir, 'before_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot before login at: {screenshot_path}\")\n            \n            # Find and enter username\n            print(\"Finding username field...\")\n            username_field = driver.find_element(By.NAME, \"UserName\")\n            username_field.send_keys(\"Monica\")\n            print(\"Entered username: Monica\")\n            \n            # Find and enter password\n            print(\"Finding password field...\")\n            password_field = driver.find_element(By.NAME, \"Password\")\n            password_field.send_keys(\"Monica@123\")\n            print(\"Entered password: Monica@123\")\n            \n            # Find and click login button\n            print(\"Finding login button...\")\n            login_button = driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\")\n            login_button.click()\n            print(\"Clicked login button\")\n            \n            # Wait for redirect\n            print(\"Waiting for redirect...\")\n            time.sleep(5)  # Increased wait time\n            \n            # Take screenshot after login\n            screenshot_path = os.path.join(current_dir, 'after_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot after login at: {screenshot_path}\")\n            \n            print(f\"Current URL after login: {driver.current_url}\")\n            print(f\"Page title: {driver.title}\")\n            \n        except Exception as e:\n            print(f\"Error during test: {str(e)}\")\n            # Take screenshot on error\n            try:\n                screenshot_path = os.path.join(os.getcwd(), 'error.png')\n                driver.save_screenshot(screenshot_path)\n                print(f\"Saved error screenshot at: {screenshot_path}\")\n            except Exception as screenshot_error:\n                print(f\"Could not save error screenshot: {str(screenshot_error)}\")\n            raise\n\n    def tearDown(self):\n        if hasattr(self, 'driver'):\n            print(\"Closing browser...\")\n            self.driver.quit()\n            print(\"Browser closed\")\n\nif __name__ == '__main__':\n    print(f\"Python version: {sys.version}\")\n    print(f\"Starting test execution from: {os.getcwd()}\")\n    unittest.main()"}}
2025-07-22T06:24:38.489Z info: Running test case: test_login.py
2025-07-22T06:24:38.492Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:25:03.910Z info: Test report saved locally
2025-07-22T06:25:03.929Z info: Test report sent to Node server
2025-07-22T06:25:03.931Z info: Temporary files deleted
2025-07-22T06:34:01.170Z info: Logs directory created or already exists
2025-07-22T06:34:01.301Z info: Attempting to connect to Node server
2025-07-22T06:34:01.339Z info: Connected to Node server
2025-07-22T06:34:01.377Z info: Received message: {"type":"registration","clientId":"f20b6c2e-b2c8-46af-9425-68b40026e593"}
2025-07-22T06:34:01.389Z info: Registered with ID: f20b6c2e-b2c8-46af-9425-68b40026e593
2025-07-22T06:34:42.407Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport time\nimport unittest\nimport os\nimport sys\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        try:\n            # Setup Chrome options\n            options = Options()\n            options.add_argument('--start-maximized')  # Start maximized\n            # Run in visible mode for debugging\n            # options.add_argument('--headless')  # Run in headless mode\n            options.add_argument('--disable-gpu')  # Disable GPU hardware acceleration\n            options.add_argument('--no-sandbox')  # Bypass OS security model\n            options.add_argument('--disable-dev-shm-usage')  # Overcome limited resource problems\n            \n            # Initialize the Chrome driver with ChromeDriverManager\n            print(\"Setting up Chrome driver...\")\n            self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n            print(f\"Chrome driver initialized: {self.driver}\")\n            \n            # Navigate to the login page\n            print(\"Navigating to login page...\")\n            self.driver.get(\"http://logistics.pearlarc.com/\")\n            print(f\"Current URL: {self.driver.current_url}\")\n        except Exception as e:\n            print(f\"Error in setUp: {str(e)}\")\n            raise\n\n    def test_valid_login(self):\n        try:\n            driver = self.driver\n            print(\"Starting login test\")\n            print(f\"Current URL before login: {driver.current_url}\")\n            \n            # Save current directory\n            current_dir = os.getcwd()\n            print(f\"Current directory: {current_dir}\")\n            \n            # Take screenshot before login\n            screenshot_path = os.path.join(current_dir, 'before_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot before login at: {screenshot_path}\")\n            \n            # Find and enter username\n            print(\"Finding username field...\")\n            username_field = driver.find_element(By.NAME, \"UserName\")\n            username_field.send_keys(\"Monica\")\n            print(\"Entered username: Monica\")\n            \n            # Find and enter password\n            print(\"Finding password field...\")\n            password_field = driver.find_element(By.NAME, \"Password\")\n            password_field.send_keys(\"Monica@123\")\n            print(\"Entered password: Monica@123\")\n            \n            # Find and click login button\n            print(\"Finding login button...\")\n            login_button = driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\")\n            login_button.click()\n            print(\"Clicked login button\")\n            \n            # Wait for redirect\n            print(\"Waiting for redirect...\")\n            time.sleep(5)  # Increased wait time\n            \n            # Take screenshot after login\n            screenshot_path = os.path.join(current_dir, 'after_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot after login at: {screenshot_path}\")\n            \n            print(f\"Current URL after login: {driver.current_url}\")\n            print(f\"Page title: {driver.title}\")\n            \n        except Exception as e:\n            print(f\"Error during test: {str(e)}\")\n            # Take screenshot on error\n            try:\n                screenshot_path = os.path.join(os.getcwd(), 'error.png')\n                driver.save_screenshot(screenshot_path)\n                print(f\"Saved error screenshot at: {screenshot_path}\")\n            except Exception as screenshot_error:\n                print(f\"Could not save error screenshot: {str(screenshot_error)}\")\n            raise\n\n    def tearDown(self):\n        if hasattr(self, 'driver'):\n            print(\"Closing browser...\")\n            self.driver.quit()\n            print(\"Browser closed\")\n\nif __name__ == '__main__':\n    print(f\"Python version: {sys.version}\")\n    print(f\"Starting test execution from: {os.getcwd()}\")\n    unittest.main()"}}
2025-07-22T06:34:42.412Z info: Running test case: test_login.py
2025-07-22T06:34:42.418Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:35:06.675Z info: Test report saved locally
2025-07-22T06:35:06.696Z info: Test report sent to Node server
2025-07-22T06:35:06.700Z info: Temporary files deleted
2025-07-22T06:50:53.308Z info: Received message: {"type":"run-test","testCase":{"name":"test_login.py","browser":"Chrome","content":"from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nfrom webdriver_manager.chrome import ChromeDriverManager\nimport time\nimport unittest\nimport os\nimport sys\n\nclass LoginTest(unittest.TestCase):\n\n    def setUp(self):\n        try:\n            # Setup Chrome options\n            options = Options()\n            options.add_argument('--start-maximized')  # Start maximized\n            # Run in visible mode for debugging\n            # options.add_argument('--headless')  # Run in headless mode\n            options.add_argument('--disable-gpu')  # Disable GPU hardware acceleration\n            options.add_argument('--no-sandbox')  # Bypass OS security model\n            options.add_argument('--disable-dev-shm-usage')  # Overcome limited resource problems\n            \n            # Initialize the Chrome driver with ChromeDriverManager\n            print(\"Setting up Chrome driver...\")\n            self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\n            print(f\"Chrome driver initialized: {self.driver}\")\n            \n            # Navigate to the login page\n            print(\"Navigating to login page...\")\n            self.driver.get(\"http://logistics.pearlarc.com/\")\n            print(f\"Current URL: {self.driver.current_url}\")\n        except Exception as e:\n            print(f\"Error in setUp: {str(e)}\")\n            raise\n\n    def test_valid_login(self):\n        try:\n            driver = self.driver\n            print(\"Starting login test\")\n            print(f\"Current URL before login: {driver.current_url}\")\n            \n            # Save current directory\n            current_dir = os.getcwd()\n            print(f\"Current directory: {current_dir}\")\n            \n            # Take screenshot before login\n            screenshot_path = os.path.join(current_dir, 'before_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot before login at: {screenshot_path}\")\n            \n            # Find and enter username\n            print(\"Finding username field...\")\n            username_field = driver.find_element(By.NAME, \"UserName\")\n            username_field.send_keys(\"Monica\")\n            print(\"Entered username: Monica\")\n            \n            # Find and enter password\n            print(\"Finding password field...\")\n            password_field = driver.find_element(By.NAME, \"Password\")\n            password_field.send_keys(\"Monica@123\")\n            print(\"Entered password: Monica@123\")\n            \n            # Find and click login button\n            print(\"Finding login button...\")\n            login_button = driver.find_element(By.XPATH, \"/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/form[1]/div[4]/div[2]/button[1]\")\n            login_button.click()\n            print(\"Clicked login button\")\n            \n            # Wait for redirect\n            print(\"Waiting for redirect...\")\n            time.sleep(5)  # Increased wait time\n            \n            # Take screenshot after login\n            screenshot_path = os.path.join(current_dir, 'after_login.png')\n            driver.save_screenshot(screenshot_path)\n            print(f\"Saved screenshot after login at: {screenshot_path}\")\n            \n            print(f\"Current URL after login: {driver.current_url}\")\n            print(f\"Page title: {driver.title}\")\n            \n        except Exception as e:\n            print(f\"Error during test: {str(e)}\")\n            # Take screenshot on error\n            try:\n                screenshot_path = os.path.join(os.getcwd(), 'error.png')\n                driver.save_screenshot(screenshot_path)\n                print(f\"Saved error screenshot at: {screenshot_path}\")\n            except Exception as screenshot_error:\n                print(f\"Could not save error screenshot: {str(screenshot_error)}\")\n            raise\n\n    def tearDown(self):\n        if hasattr(self, 'driver'):\n            print(\"Closing browser...\")\n            self.driver.quit()\n            print(\"Browser closed\")\n\nif __name__ == '__main__':\n    print(f\"Python version: {sys.version}\")\n    print(f\"Starting test execution from: {os.getcwd()}\")\n    unittest.main()"}}
2025-07-22T06:50:53.311Z info: Running test case: test_login.py
2025-07-22T06:50:53.316Z info: Test file saved at: C:\Workspace\Pearlarc\al_execution_demo_with_client_using_electron_nodejs\al_demo_execution_client_electron\electron-app\test_login.py
2025-07-22T06:51:18.011Z info: Test report saved locally
2025-07-22T06:51:18.029Z info: Test report sent to Node server
2025-07-22T06:51:18.032Z info: Temporary files deleted
